[{"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\index.js":"1","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\App.js":"2","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\reportWebVitals.js":"3","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\components\\ApplicationViews.js":"4","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\Register.js":"5","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\Login.js":"6","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\Home.js":"7","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\providers\\UserProvider.js":"8","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\components\\Navigation.js":"9","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\CourseManager.js":"10","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\ScorecardManager.js":"11","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\DiscManager.js":"12","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\components\\DiscCard.js":"13","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\utils\\getWindowDimensions.js":"14","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\DiscForm.js":"15","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\components\\CourseCard.js":"16","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\components\\ScorecardCard.js":"17","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\utils\\dateFormatter.js":"18","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\utils\\groupBy.js":"19","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\components\\ScoreBar.js":"20","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\components\\CourseSearch.js":"21","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\CourseDetails.js":"22","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\components\\DiscFilter.js":"23","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\HoleDetails.js":"24","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\ShotForm.js":"25","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\HoleOverview.js":"26","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\components\\ShotCard.js":"27","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\RoundOverview.js":"28","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\components\\HoleCard.js":"29"},{"size":694,"mtime":1612194816500,"results":"30","hashOfConfig":"31"},{"size":677,"mtime":1612885458651,"results":"32","hashOfConfig":"31"},{"size":362,"mtime":499162500000,"results":"33","hashOfConfig":"31"},{"size":3727,"mtime":1612907224847,"results":"34","hashOfConfig":"31"},{"size":3837,"mtime":1612284695957,"results":"35","hashOfConfig":"31"},{"size":2909,"mtime":1612284663675,"results":"36","hashOfConfig":"31"},{"size":5102,"mtime":1612972563603,"results":"37","hashOfConfig":"31"},{"size":3403,"mtime":1611952773672,"results":"38","hashOfConfig":"31"},{"size":6770,"mtime":1612902990390,"results":"39","hashOfConfig":"31"},{"size":2071,"mtime":1612902941265,"results":"40","hashOfConfig":"31"},{"size":1847,"mtime":1612806334533,"results":"41","hashOfConfig":"31"},{"size":2645,"mtime":1612890631799,"results":"42","hashOfConfig":"31"},{"size":1533,"mtime":1612882951525,"results":"43","hashOfConfig":"31"},{"size":650,"mtime":1612296988603,"results":"44","hashOfConfig":"31"},{"size":9302,"mtime":1612726038971,"results":"45","hashOfConfig":"31"},{"size":1667,"mtime":1612902739328,"results":"46","hashOfConfig":"31"},{"size":3411,"mtime":1612973573878,"results":"47","hashOfConfig":"31"},{"size":208,"mtime":1612380112435,"results":"48","hashOfConfig":"31"},{"size":172,"mtime":1612561663110,"results":"49","hashOfConfig":"31"},{"size":2250,"mtime":1612900794302,"results":"50","hashOfConfig":"31"},{"size":1855,"mtime":1612972414275,"results":"51","hashOfConfig":"31"},{"size":12952,"mtime":1612907220768,"results":"52","hashOfConfig":"31"},{"size":1011,"mtime":1612890918385,"results":"53","hashOfConfig":"31"},{"size":6858,"mtime":1612974735483,"results":"54","hashOfConfig":"31"},{"size":17029,"mtime":1612974007863,"results":"55","hashOfConfig":"31"},{"size":3429,"mtime":1612906370999,"results":"56","hashOfConfig":"31"},{"size":1230,"mtime":1612887777631,"results":"57","hashOfConfig":"31"},{"size":5485,"mtime":1612972643977,"results":"58","hashOfConfig":"31"},{"size":993,"mtime":1612906567238,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1401a8f",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"62"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\index.js",[],["128","129"],"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\App.js",[],"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\reportWebVitals.js",[],"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\components\\ApplicationViews.js",[],"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\Register.js",[],"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\Login.js",[],"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\Home.js",["130","131","132"],"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\providers\\UserProvider.js",[],"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\components\\Navigation.js",[],"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\CourseManager.js",["133"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { UserContext } from \"../providers/UserProvider\";\r\nimport { CourseCard } from \"../components/CourseCard\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport CourseSearch from \"../components/CourseSearch\";\r\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport const CourseManager = () => {\r\n    const [courses, setCourses] = useState([]);\r\n    const { getToken } = useContext(UserContext);\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/course`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })\r\n                .then((res) => res.json())\r\n                .then((parsedCourses) => {\r\n                    setCourses(parsedCourses);\r\n                })\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    {location.pathname.includes(\"scorecards\") && (\r\n                        <Link to={\"/scorecards\"} className=\"mt-4 ml-5 d-none d-md-flex\">\r\n                            <FontAwesomeIcon size=\"lg\" className=\"ml-2 text-secondary cancel\" icon={faArrowLeft} />\r\n                        </Link>\r\n                    )}\r\n                    <CourseSearch onSearch={setCourses} />\r\n                </div>\r\n                <h2>{location.pathname.includes(\"scorecards\") ? \"Choose Course\" : \"Courses\"}</h2>\r\n                <div className=\"row justify-content-center\">\r\n                    {\r\n                        courses.map(course => (\r\n                            <div key={course.id} className=\"m-4\">\r\n                                <CourseCard course={course} />\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\ScorecardManager.js",["134"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { UserContext } from \"../providers/UserProvider\";\r\nimport { ScorecardCard } from \"../components/ScorecardCard\";\r\nimport { Button } from \"reactstrap\";\r\nimport useWindowDimensions from \"../utils/getWindowDimensions\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const ScorecardManager = () => {\r\n    const [scorecards, setScorecards] = useState([]);\r\n    const { getToken } = useContext(UserContext);\r\n    const { width } = useWindowDimensions();\r\n    const history = useHistory();\r\n\r\n    const currentUserId = JSON.parse(localStorage.getItem(\"user\")).id;\r\n\r\n    useEffect(() => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/scorecard/user/${currentUserId}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })\r\n                .then((res) => res.json())\r\n                .then((parsedScorecards) => {\r\n                    setScorecards(parsedScorecards);\r\n                })\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <h2>Scorecards</h2>\r\n            <Button type=\"button\"\r\n                block={width < 992}\r\n                onClick={() => history.push(\"/scorecards/courses\")}\r\n                color=\"danger\">New Scorecard</Button>\r\n            <div className=\"row justify-content-center\">\r\n                {\r\n                    scorecards.map(scorecard => {\r\n                        return (\r\n                            <div key={scorecard.id} className=\"m-4\">\r\n                                <ScorecardCard scorecard={scorecard} />\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\DiscManager.js",["135"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { UserContext } from \"../providers/UserProvider\";\r\nimport { DiscCard } from \"../components/DiscCard\";\r\nimport { Button } from \"reactstrap\";\r\nimport useWindowDimensions from \"../utils/getWindowDimensions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { DiscFilter } from \"../components/DiscFilter\";\r\n\r\nexport const DiscManager = () => {\r\n    const [discs, setDiscs] = useState([]);\r\n    const [searchTerms, setSearchTerms] = useState(\"\");\r\n    const [filtered, setFiltered] = useState([]);\r\n    const { getToken } = useContext(UserContext);\r\n    const { width } = useWindowDimensions();\r\n    const history = useHistory();\r\n\r\n    const currentUserId = JSON.parse(localStorage.getItem(\"user\")).id;\r\n\r\n    useEffect(() => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/disc/${currentUserId}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })\r\n                .then((res) => res.json())\r\n                .then((parsedDiscs) => {\r\n                    setDiscs(parsedDiscs);\r\n                })\r\n        );\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (searchTerms !== \"\") {\r\n            // If the search field is not blank, display matching friends\r\n            const subset = discs.filter(disc => {\r\n                return disc.name.toLowerCase().includes(searchTerms.toLowerCase())\r\n            })\r\n            setFiltered(subset)\r\n        } else {\r\n            // If the search field is blank, display all user friends\r\n            setFiltered(discs)\r\n        }\r\n    }, [searchTerms, discs])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <DiscFilter searchTerms={searchTerms} setSearchTerms={setSearchTerms} />\r\n                </div>\r\n                <h2>Discs</h2>\r\n                <Button type=\"button\"\r\n                    block={width < 992}\r\n                    onClick={() => history.push(\"/discs/add\")}\r\n                    color=\"danger\">Add Disc</Button>\r\n                <div className=\"row justify-content-center\">\r\n                    {\r\n                        filtered.map(disc => {\r\n                            return (\r\n                                <div key={disc.id} className=\"m-4\">\r\n                                    <DiscCard disc={disc} />\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\components\\DiscCard.js",["136"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card } from \"reactstrap\";\r\nimport { UserContext } from \"../providers/UserProvider\";\r\n\r\nexport const DiscCard = ({ disc }) => {\r\n    const { getToken } = useContext(UserContext);\r\n    const [discShots, setDiscShots] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/shot/disc/${disc.id}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })\r\n                .then((res) => res.json())\r\n                .then((parsedShots) => {\r\n                    setDiscShots(parsedShots);\r\n                })\r\n        );\r\n    }, [])\r\n\r\n    return (\r\n        <Link to={`/discs/edit/${disc.id}`} className=\"card-link\">\r\n            <Card className=\"bg-light mobile-card\">\r\n                <h5 className=\"card-header\"><strong>{disc.name}</strong></h5>\r\n                <div className=\"col-12 py-3 card-body\">\r\n                    <p className=\"text-left ml-3\"><strong>Weight:</strong> {disc.weight}g</p>\r\n                    <p className=\"text-left ml-3\"><strong>Plastic:</strong> {disc.plastic}</p>\r\n                    <p className=\"text-left ml-3\"><strong>Type:</strong> {disc.discType.label}</p>\r\n                    <p className=\"text-left ml-3\"><strong>Throws recorded:</strong> {discShots.length}</p>\r\n                </div>\r\n            </Card >\r\n        </Link>\r\n    );\r\n};","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\utils\\getWindowDimensions.js",[],"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\DiscForm.js",["137","138"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Button, Form, FormGroup, Label, Input, ModalBody, ModalFooter, Modal, ModalHeader } from \"reactstrap\";\r\nimport { UserContext } from \"../providers/UserProvider\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport useWindowDimensions from \"../utils/getWindowDimensions\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport const DiscForm = () => {\r\n    const { getToken } = useContext(UserContext);\r\n    const [discTypes, setDiscTypes] = useState([]);\r\n    const [disc, setDisc] = useState({});\r\n    const [pendingDelete, setPendingDelete] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const { width } = useWindowDimensions();\r\n\r\n    const { discId } = useParams();\r\n    const history = useHistory();\r\n    const userId = JSON.parse(localStorage.getItem(\"user\")).id;\r\n\r\n    //get Disc\r\n    const getDiscById = () => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/disc/edit/${discId}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })\r\n                .then((res) => {\r\n                    if (res.status === 404) {\r\n                        toast.error(\"That's not your disc\");\r\n                        history.push(\"/discs\");\r\n                    }\r\n                    return res.json();\r\n                })\r\n                .then((data) => {\r\n                    setDisc(data);\r\n                })\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (discId) {\r\n            getDiscById();\r\n            setIsLoading(false);\r\n        } else {\r\n            setIsLoading(false);\r\n            setDisc({\r\n                name: \"\",\r\n                weight: 0,\r\n                plastic: \"\",\r\n                discTypeId: 0\r\n            });\r\n        }\r\n    }, [discId]);\r\n\r\n    useEffect(() => {\r\n        getToken().then((token) =>\r\n            fetch(\"/api/discType\", {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })\r\n                .then((res) => res.json())\r\n                .then((data) => {\r\n                    setDiscTypes(data);\r\n                })\r\n        );\r\n    }, []);\r\n\r\n    const addDisc = (disc) => {\r\n        getToken().then((token) => {\r\n            return fetch(\"/api/disc\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify(disc),\r\n            }).then(() => history.push(\"/discs\"));\r\n        });\r\n    };\r\n\r\n    const updateDisc = (disc) => {\r\n        getToken().then((token) => {\r\n            return fetch(`/api/disc/${disc.id}`, {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify(disc),\r\n            }).then(() => history.push(\"/discs\"));\r\n        });\r\n    };\r\n\r\n    const handleControlledInputChange = (event) => {\r\n        const newDisc = { ...disc };\r\n        newDisc[event.target.name] = event.target.value;\r\n        setDisc(newDisc);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (parseInt(disc.discTypeId) === 0) {\r\n            toast.error(\"Enter a disc type\", { position: \"top:center\" });\r\n        } else {\r\n            setIsLoading(true);\r\n            if (discId) {\r\n                updateDisc({\r\n                    id: disc.id,\r\n                    name: disc.name,\r\n                    weight: disc.weight,\r\n                    plastic: disc.plastic,\r\n                    IsActive: true,\r\n                    userId: parseInt(userId),\r\n                    discTypeId: disc.discTypeId\r\n                });\r\n            } else {\r\n                addDisc({\r\n                    name: disc.name,\r\n                    weight: disc.weight,\r\n                    plastic: disc.plastic,\r\n                    IsActive: true,\r\n                    userId: parseInt(userId),\r\n                    discTypeId: disc.discTypeId\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleDelete = () => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/disc/${disc.id}`, {\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            }).then(() => history.push(\"/discs\"))\r\n        );\r\n        setPendingDelete(false);\r\n    };\r\n\r\n    if (disc?.id) {\r\n        if (disc?.userId !== parseInt(userId)) {\r\n            return (\r\n                <>\r\n                    <h1>This is not your disc to edit</h1>\r\n                    <Button>\r\n                        <Link to={\"/discs\"}>Go Back</Link>\r\n                    </Button>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={width < 768 ? \"container my-5\" : \"container border border-dark my-5 bg-light\"} style={{ minWidth: \"20em\", maxWidth: \"25em\" }}>\r\n            <Link to={\"/discs\"} className=\"row d-none d-md-flex\" disabled={isLoading}>\r\n                <FontAwesomeIcon size=\"lg\" className=\"ml-auto mt-1 mr-2 text-secondary cancel\" icon={faTimes} />\r\n            </Link>\r\n            <Form className=\"p-5 mt-n5\" onSubmit={handleSubmit}>\r\n                {discId ? <h2>Edit Disc</h2> : <h2>Add Disc</h2>}\r\n                <FormGroup row>\r\n                    <Label for=\"name\">\r\n                        Name\r\n                    </Label>\r\n                    <Input\r\n                        type=\"text\"\r\n                        id=\"discName\"\r\n                        name=\"name\"\r\n                        autoFocus\r\n                        placeholder=\"Name\"\r\n                        className=\"form-control\"\r\n                        onChange={handleControlledInputChange}\r\n                        required=\"required\"\r\n                        defaultValue={disc?.name}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup row>\r\n                    <Label>\r\n                        Type\r\n                    </Label>\r\n                    <Input\r\n                        type=\"select\"\r\n                        name=\"discTypeId\"\r\n                        onChange={handleControlledInputChange}\r\n                        required=\"required\"\r\n                        value={disc?.discTypeId}\r\n                    >\r\n                        <option value=\"0\" hidden>Select a type</option>\r\n                        {\r\n                            discTypes.map((dt) => (\r\n                                <option value={dt.id} key={dt.id}>\r\n                                    {dt.label}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </Input>\r\n                </FormGroup>\r\n                <FormGroup row>\r\n                    <Label for=\"content\">\r\n                        Plastic\r\n                    </Label>\r\n                    <Input\r\n                        type=\"text\"\r\n                        name=\"plastic\"\r\n                        placeholder=\"Plastic\"\r\n                        onChange={handleControlledInputChange}\r\n                        defaultValue={disc?.plastic}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup row>\r\n                    <Label for=\"content\">\r\n                        Weight\r\n                    </Label>\r\n                    <Input\r\n                        type=\"number\"\r\n                        name=\"weight\"\r\n                        onChange={handleControlledInputChange}\r\n                        defaultValue={disc?.weight}\r\n                    />\r\n                </FormGroup>\r\n                <Button block={width < 992} type=\"submit\" className=\"mt-4 mr-3\" color=\"danger\" disabled={isLoading}>\r\n                    {discId ? \"Save\" : \"Submit\"}\r\n                </Button>\r\n                {discId && (\r\n                    <Button block={width < 992}\r\n                        onClick={(e) => setPendingDelete(true)}\r\n                        className=\"mt-4\"\r\n                        color=\"dark\"\r\n                        disabled={isLoading}\r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                )}\r\n            </Form>\r\n            <Modal isOpen={pendingDelete}>\r\n                <ModalHeader>Delete {disc.name}?</ModalHeader>\r\n                <ModalBody>\r\n                    Are you sure you want to delete this disc? This action cannot be\r\n                    undone.\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button outline onClick={(e) => setPendingDelete(false)}>No, Cancel</Button>\r\n                    <Button color=\"dark\" onClick={handleDelete}>\r\n                        Yes, Delete\r\n                </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\components\\CourseCard.js",["139"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { Card } from \"reactstrap\";\r\nimport { UserContext } from \"../providers/UserProvider\";\r\n\r\nexport const CourseCard = ({ course }) => {\r\n    const { getToken } = useContext(UserContext);\r\n    const [timesPlayed, setTimesPlayed] = useState([]);\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/scorecard/course/${course.id}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })\r\n                .then((res) => res.json())\r\n                .then((data) => {\r\n                    setTimesPlayed(data);\r\n                })\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <Link to={`${location.pathname}/${course.id}`} className=\"card-link\">\r\n            <Card className=\"course-card bg-light mobile-card\">\r\n                <h5 className=\"card-header\"><strong>{course.name}</strong></h5>\r\n                <div className=\"col-12 py-3 card-body\">\r\n                    <p className=\"text-left no wrap ml-3\"><strong>Location:</strong> {course.location}</p>\r\n                    <div className=\"mb-3 description\" style={{ position: \"relative\" }}>\r\n                        <p className=\"text-left ml-3 line-clamp\"><strong>Decription:</strong> {course.description}</p>\r\n                    </div>\r\n                    <p className=\"text-left ml-3\"><strong>Times Played:</strong> {timesPlayed.length}</p>\r\n                </div>\r\n            </Card >\r\n        </Link>\r\n    );\r\n};","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\components\\ScorecardCard.js",["140","141","142","143"],"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\utils\\dateFormatter.js",[],"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\utils\\groupBy.js",[],"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\components\\ScoreBar.js",["144"],"import React, { useEffect, useRef } from \"react\";\r\nimport Chartjs from \"chart.js\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst chartConfig = (names, breakdown, params) => {\r\n    const labels = [...names];\r\n    const data = [breakdown.minus, breakdown.birdie, breakdown.par, breakdown.bogey, breakdown.double, breakdown.plus];\r\n    const backgroundColor = [\r\n        \"rgba(51, 153, 243, 0.6)\", \"rgba(60, 181, 33, 0.6)\",\r\n        \"rgba(68, 110, 155, 0.6)\", \"rgba(205, 2, 0, 0.6)\",\r\n        \"rgba(212, 117, 0, 0.6)\", \"rgba(153, 153, 153, 0.6)\"\r\n    ];\r\n    const borderColor = [\r\n        \"rgba(51, 153, 243, 1)\", \"rgba(60, 181, 33, 1)\",\r\n        \"rgba(68, 110, 155, 1)\", \"rgba(205, 2, 0, 1)\",\r\n        \"rgba(212, 117, 0, 1)\", \"rgba(153, 153, 153, 1)\"\r\n    ];\r\n\r\n    return ({\r\n        type: \"horizontalBar\",\r\n        data: {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    data: data,\r\n                    backgroundColor: backgroundColor,\r\n                    borderColor: borderColor,\r\n                    borderWidth: 1\r\n                }\r\n            ]\r\n        },\r\n        options: {\r\n            title: {\r\n                display: true,\r\n                text: params.courseId ? \"Course Scoring Breakdown\" : params.holeId ? \"Hole Scoring Breakdown\" : \"All Time Score Breakdown\",\r\n                fontSize: 16\r\n            },\r\n            maintainAspectRatio: false,\r\n            legend: {\r\n                display: false\r\n            },\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        ticks: {\r\n                            beginAtZero: true\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    })\r\n};\r\n\r\nexport const ScoreBar = ({ scoreBreakdown }) => {\r\n    const chartContainer = useRef(null);\r\n    const params = useParams();\r\n    const names = [\"Eagle -\", \"Birdie\", \"Par\", \"Bogey\", \"Dbl Bogey\", \"3+ Bogey\"];\r\n\r\n    useEffect(() => {\r\n        if (chartContainer && chartContainer.current) {\r\n            new Chartjs(chartContainer.current, chartConfig(names, scoreBreakdown, params));\r\n        }\r\n    }, [chartContainer]);\r\n\r\n    return (\r\n        <canvas ref={chartContainer} />\r\n    );\r\n};","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\components\\CourseSearch.js",[],"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\CourseDetails.js",["145","146","147","148"],"import { Button, Form, FormGroup, Input, Label } from \"reactstrap\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useLocation, useParams } from \"react-router-dom\";\r\nimport { UserContext } from \"../providers/UserProvider\";\r\nimport useWindowDimensions from \"../utils/getWindowDimensions\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { toast } from \"react-toastify\";\r\nimport groupBy from \"../utils/groupBy\";\r\nimport { ScoreBar } from \"../components/ScoreBar\";\r\n\r\nexport const CourseDetails = () => {\r\n    const [course, setCourse] = useState({});\r\n    const [holes, setHoles] = useState([]);\r\n    const [scorecards, setScorecards] = useState([]);\r\n    const [shots, setShots] = useState([]);\r\n    const [allConditions, setAllConditions] = useState([]);\r\n    const [conditionsId, setConditionsId] = useState(0);\r\n    const [par, setPar] = useState();\r\n    const [scores, setScores] = useState([]);\r\n    const [distance, setDistance] = useState();\r\n    const [average, setAverage] = useState();\r\n    const [best, setBest] = useState();\r\n    const [scoreBreakdown, setScoreBreakdown] = useState();\r\n    const { getToken } = useContext(UserContext);\r\n    const { width } = useWindowDimensions();\r\n    const location = useLocation();\r\n    const params = useParams();\r\n    const history = useHistory();\r\n\r\n    const currentUserId = JSON.parse(localStorage.getItem(\"user\")).id;\r\n\r\n    useEffect(() => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/course/${params.courseId}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })\r\n                .then((res) => res.json())\r\n                .then((parsedCourse) => {\r\n                    setCourse(parsedCourse);\r\n                })\r\n                .then(() => {\r\n                    return fetch(`/api/conditions`, {\r\n                        method: \"GET\",\r\n                        headers: {\r\n                            Authorization: `Bearer ${token}`,\r\n                        },\r\n                    })\r\n                        .then((res) => res.json())\r\n                        .then((parsedConditions) => {\r\n                            setAllConditions(parsedConditions);\r\n                        })\r\n                })\r\n        );\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (course.id) {\r\n            getToken().then((token) =>\r\n                fetch(`/api/shot/course/${course.id}`, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                })\r\n                    .then((res) => res.json())\r\n                    .then((parsedShots) => {\r\n                        setShots(parsedShots);\r\n                    })\r\n                    .then(() => {\r\n                        return fetch(`/api/scorecard/course/${params.courseId}`, {\r\n                            method: \"GET\",\r\n                            headers: {\r\n                                Authorization: `Bearer ${token}`,\r\n                            },\r\n                        })\r\n                            .then((res) => res.json())\r\n                            .then((parsedScorecards) => {\r\n                                setScorecards(parsedScorecards);\r\n                            })\r\n                    })\r\n                    .then(() => {\r\n                        return fetch(`/api/hole/course/${params.courseId}`, {\r\n                            method: \"GET\",\r\n                            headers: {\r\n                                Authorization: `Bearer ${token}`,\r\n                            },\r\n                        })\r\n                            .then((res) => res.json())\r\n                            .then((parsedHoles) => {\r\n                                setHoles(parsedHoles);\r\n                            })\r\n                    })\r\n            )\r\n        }\r\n    }, [course]);\r\n\r\n    useEffect(() => {\r\n        if (holes.length) {\r\n            const holePars = [];\r\n            const holeLengths = [];\r\n            holes.forEach(hole => {\r\n                holePars.push(hole.par)\r\n                holeLengths.push(hole.distance)\r\n            });\r\n            setPar(holePars.reduce((acc, cur) => acc + cur));\r\n            setDistance(holeLengths.reduce((acc, cur) => acc + cur));\r\n        }\r\n    }, [holes]);\r\n\r\n    useEffect(() => {\r\n        if (shots.length && holes.length && !scores.length) {\r\n            const shotsPerScorecard = groupBy(shots, \"scorecardId\")\r\n            const roundScores = shotsPerScorecard.map(scorecardShots => {\r\n                if (scorecardShots) {\r\n                    return findScore(scorecardShots)\r\n                }\r\n                return null\r\n            })\r\n            const filteredScores = roundScores.filter(rs => rs !== null)\r\n            setScores(filteredScores);\r\n        }\r\n    }, [shots, holes]);\r\n\r\n    useEffect(() => {\r\n        if (scores.length && scores.length === scorecards.length) {\r\n            const totalAverage = Math.round(scores.reduce((acc, cur) => acc + cur) / scores.length);\r\n            const bestScore = Math.min(...scores)\r\n            setAverage(totalAverage < 0 ? totalAverage : totalAverage === 0 ? \"E\" : `+${totalAverage}`)\r\n            setBest(bestScore < 0 ? bestScore : bestScore === 0 ? \"E\" : `+${bestScore}`);\r\n        }\r\n    }, [scores]);\r\n\r\n    useEffect(() => {\r\n        if (shots.length && best) {\r\n            const groupByHoles = groupBy(shots, \"holeId\");\r\n            const groupByRound = groupByHoles.map(hole => groupBy(hole, \"scorecardId\"));\r\n            const breakdown = {\r\n                minus: 0,\r\n                birdie: 0,\r\n                par: 0,\r\n                bogey: 0,\r\n                double: 0,\r\n                plus: 0\r\n            };\r\n            groupByRound.forEach(holeNum => {\r\n                holeNum.forEach(roundShots => {\r\n                    if (roundShots) {\r\n                        let par = roundShots[0].hole.par;\r\n                        let penaltyStrokes = roundShots.filter(shot => shot.qualityOfShotId === 4).length;\r\n                        switch (roundShots.length + penaltyStrokes - par) {\r\n                            case -4:\r\n                                breakdown.minus = breakdown.minus + 1;\r\n                                break;\r\n                            case -3:\r\n                                breakdown.minus = breakdown.minus + 1;\r\n                                break;\r\n                            case -2:\r\n                                breakdown.minus = breakdown.minus + 1;\r\n                                break;\r\n                            case -1:\r\n                                breakdown.birdie = breakdown.birdie + 1;\r\n                                break;\r\n                            case 0:\r\n                                breakdown.par = breakdown.par + 1;\r\n                                break;\r\n                            case 1:\r\n                                breakdown.bogey = breakdown.bogey + 1;\r\n                                break;\r\n                            case 2:\r\n                                breakdown.double = breakdown.double + 1;\r\n                                break;\r\n                            default:\r\n                                breakdown.plus = breakdown.plus + 1;\r\n                                break;\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            setScoreBreakdown(breakdown);\r\n        }\r\n\r\n    }, [shots, best])\r\n\r\n    const findScore = (scorecardShots) => {\r\n        let totalScore = 0;\r\n        holes.forEach(hole => {\r\n            let shotsForHole = scorecardShots.filter(ss => ss.holeId === hole.id)\r\n            if (shotsForHole.length) {\r\n                let penaltyStrokes = 0;\r\n                shotsForHole.forEach(shot => {\r\n                    if (shot.qualityOfShotId === 4) {\r\n                        penaltyStrokes = penaltyStrokes + 1\r\n                    }\r\n                })\r\n                let holeScore = shotsForHole.length + penaltyStrokes - hole.par;\r\n                totalScore = totalScore + holeScore;\r\n            }\r\n        });\r\n        return totalScore;\r\n    }\r\n\r\n    const addScorecard = (scorecard) => {\r\n        getToken().then((token) =>\r\n            fetch(\"/api/scorecard\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify(scorecard),\r\n            })\r\n                .then(res => res.json())\r\n                .then(data => history.push(`/scorecards/${data.id}/${holes.find(hole => hole.number === 1).id}`))\r\n        );\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (parseInt(conditionsId) === 0) {\r\n            toast.error(\"Enter conditions\", { position: \"top:center\" });\r\n        } else {\r\n            addScorecard({\r\n                courseId: params.courseId,\r\n                conditionsId: conditionsId,\r\n                userId: parseInt(currentUserId)\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"mt-4 mt-md-0\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <Link to={location.pathname.includes(\"scorecards\") ? \"/scorecards/courses\" : \"/courses\"}\r\n                            className=\"mt-4  d-none d-md-flex\"\r\n                        >\r\n                            <FontAwesomeIcon size=\"lg\" className=\"ml-2 text-secondary cancel\" icon={faArrowLeft} />\r\n                        </Link>\r\n                    </div>\r\n                    <h3>{course.name}</h3>\r\n                    <div>\r\n                        <p className=\"text-left\"><strong>Location:</strong> {course.location}</p>\r\n                        <p className=\"text-left\"><strong>Description:</strong> {course.description}</p>\r\n                    </div>\r\n                    <hr />\r\n                    <div className=\"row mr-1 justify-content-between\">\r\n                        <p className=\"text-left ml-3\"><strong>Par:</strong> {par}</p>\r\n                        <p className=\"text-left ml-3\"><strong>Distance:</strong> {distance}ft</p>\r\n                        <p className=\"text-left ml-3\"><strong># of holes:</strong> {holes.length}</p>\r\n                        <p className=\"text-left ml-3\"><strong>Times played:</strong> {scorecards.length}</p>\r\n                        <p className=\"text-left ml-3\"><strong>Avg score:</strong> {scorecards.length ? average : \"N/A\"}</p>\r\n                        <p className=\"text-left ml-3\"><strong>Best score:</strong> {scorecards.length ? best : \"N/A\"}</p>\r\n                    </div>\r\n                    <hr />\r\n                </div>\r\n                {scoreBreakdown && (\r\n                    <div className=\"mx-0 my-3\" style={{ position: \"relative\", width: \"95vw\", height: \"18em\" }}>\r\n                        <ScoreBar scoreBreakdown={scoreBreakdown} />\r\n                    </div>\r\n                )}\r\n                {location.pathname.includes(\"scorecards\") && (\r\n                    <div className=\"container\">\r\n                        <Form className={width > 576 ? (width < 992 ? \"my-4 mx-auto w-75\" : \"mt-4 mx-auto w-25\") : \"my-4 mx-3\"}\r\n                            onSubmit={handleSubmit}\r\n                        >\r\n                            <FormGroup row>\r\n                                <Label>\r\n                                    Current Conditions\r\n                                </Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"conditionsId\"\r\n                                    onChange={(e) => setConditionsId(e.target.value)}\r\n                                    required=\"required\"\r\n                                    value={conditionsId}\r\n                                >\r\n                                    <option value=\"0\" hidden>Select conditions</option>\r\n                                    {\r\n                                        allConditions.map((c) => (\r\n                                            <option value={c.id} key={c.id}>\r\n                                                {c.label}\r\n                                            </option>\r\n                                        ))\r\n                                    }\r\n                                </Input>\r\n                            </FormGroup>\r\n                            <Button color=\"danger\" type=\"submit\" block={width < 768}>Start Round</Button>\r\n                        </Form>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\components\\DiscFilter.js",[],"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\HoleDetails.js",["149","150"],"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\ShotForm.js",["151","152"],"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\HoleOverview.js",["153","154"],"import { useContext, useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { Button } from \"reactstrap\";\r\nimport { ShotCard } from \"../components/ShotCard\";\r\nimport { UserContext } from \"../providers/UserProvider\";\r\nimport useWindowDimensions from \"../utils/getWindowDimensions\";\r\n\r\nexport const HoleOverview = () => {\r\n    const [hole, setHole] = useState([]);\r\n    const [shots, setShots] = useState([]);\r\n    const { getToken } = useContext(UserContext);\r\n    const { width } = useWindowDimensions();\r\n    const history = useHistory();\r\n    const params = useParams();\r\n\r\n    useEffect(() => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/hole/${params.holeId}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })\r\n                .then((res) => res.json())\r\n                .then((parsedHole) => {\r\n                    setHole(parsedHole);\r\n                })\r\n        );\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (hole) {\r\n            getToken().then((token) =>\r\n                fetch(`/api/shot/hole/${params.holeId}/${params.scorecardId}`, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                })\r\n                    .then((res) => res.json())\r\n                    .then((parsedShots) => {\r\n                        setShots(parsedShots);\r\n                    })\r\n            );\r\n        }\r\n    }, [hole]);\r\n\r\n    const handleAdd = () => {\r\n        localStorage.setItem(\"hole\", hole.number)\r\n        history.push(`/scorecards/${params.scorecardId}/${parseInt(params.holeId)}/shot/${getTotalShots()}`)\r\n    }\r\n\r\n    const getTotalShots = () => {\r\n        const thrownShots = shots.length;\r\n        const penaltyStrokes = shots.filter(shot => shot.qualityOfShotId === 4).length\r\n        return thrownShots + penaltyStrokes + 1;\r\n    }\r\n\r\n    return (\r\n        <div className=\"container mt-4 mb-5\">\r\n            <h3 className=\"mt-3\">Hole {hole.number} Overview</h3>\r\n            <div>\r\n                <p className=\"text-left\"><strong>Total strokes:</strong> {shots.length + shots.filter(shot => shot.qualityOfShotId === 4).length}</p>\r\n                <p className=\"text-left\"><strong>Penalty strokes:</strong> {shots.filter(shot => shot.qualityOfShotId === 4).length}</p>\r\n            </div>\r\n            <div className=\"row justify-content-center\">\r\n                {\r\n                    shots.map((shot, i) => (\r\n                        <div key={shot.id} className=\"m-4 w-100\">\r\n                            <ShotCard shot={shot} shotNumber={i + 1} hole={hole} params={params} />\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n            <Button color=\"secondary\" className=\"my-4\" block={width < 768} onClick={handleAdd}>Add Shot</Button>\r\n            <hr />\r\n            {hole.number !== 18 && <><Button color=\"danger\" className=\"mt-3\" block={width < 768} onClick={() => history.push(`/scorecards/${params.scorecardId}/${parseInt(params.holeId) + 1}`)}>Next Hole</Button><br /></>}\r\n            <Button color=\"primary\" block={width < 768} className=\"mt-3\" onClick={() => history.push(`/scorecards/${params.scorecardId}/overview`)}>Finish Round</Button>\r\n        </div>\r\n    )\r\n}","C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\components\\ShotCard.js",[],"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\pages\\RoundOverview.js",["155","156"],"C:\\Users\\rab01\\workspace\\DiscStats\\DiscStats\\client\\src\\components\\HoleCard.js",[],{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","severity":1,"message":"162","line":30,"column":8,"nodeType":"163","endLine":30,"endColumn":10,"suggestions":"164"},{"ruleId":"161","severity":1,"message":"162","line":45,"column":8,"nodeType":"163","endLine":45,"endColumn":10,"suggestions":"165"},{"ruleId":"161","severity":1,"message":"166","line":102,"column":8,"nodeType":"163","endLine":102,"endColumn":21,"suggestions":"167"},{"ruleId":"161","severity":1,"message":"168","line":27,"column":8,"nodeType":"163","endLine":27,"endColumn":10,"suggestions":"169"},{"ruleId":"161","severity":1,"message":"170","line":29,"column":8,"nodeType":"163","endLine":29,"endColumn":10,"suggestions":"171"},{"ruleId":"161","severity":1,"message":"170","line":32,"column":8,"nodeType":"163","endLine":32,"endColumn":10,"suggestions":"172"},{"ruleId":"161","severity":1,"message":"173","line":23,"column":8,"nodeType":"163","endLine":23,"endColumn":10,"suggestions":"174"},{"ruleId":"161","severity":1,"message":"175","line":58,"column":8,"nodeType":"163","endLine":58,"endColumn":16,"suggestions":"176"},{"ruleId":"161","severity":1,"message":"168","line":73,"column":8,"nodeType":"163","endLine":73,"endColumn":10,"suggestions":"177"},{"ruleId":"161","severity":1,"message":"178","line":24,"column":8,"nodeType":"163","endLine":24,"endColumn":10,"suggestions":"179"},{"ruleId":"161","severity":1,"message":"180","line":27,"column":8,"nodeType":"163","endLine":27,"endColumn":10,"suggestions":"181"},{"ruleId":"161","severity":1,"message":"182","line":42,"column":8,"nodeType":"163","endLine":42,"endColumn":10,"suggestions":"183"},{"ruleId":"161","severity":1,"message":"184","line":49,"column":8,"nodeType":"163","endLine":49,"endColumn":31,"suggestions":"185"},{"ruleId":"161","severity":1,"message":"186","line":55,"column":8,"nodeType":"163","endLine":55,"endColumn":15,"suggestions":"187"},{"ruleId":"161","severity":1,"message":"188","line":64,"column":8,"nodeType":"163","endLine":64,"endColumn":24,"suggestions":"189"},{"ruleId":"161","severity":1,"message":"190","line":58,"column":8,"nodeType":"163","endLine":58,"endColumn":10,"suggestions":"191"},{"ruleId":"161","severity":1,"message":"190","line":99,"column":8,"nodeType":"163","endLine":99,"endColumn":16,"suggestions":"192"},{"ruleId":"161","severity":1,"message":"193","line":126,"column":8,"nodeType":"163","endLine":126,"endColumn":22,"suggestions":"194"},{"ruleId":"161","severity":1,"message":"166","line":135,"column":8,"nodeType":"163","endLine":135,"endColumn":16,"suggestions":"195"},{"ruleId":"161","severity":1,"message":"196","line":34,"column":8,"nodeType":"163","endLine":34,"endColumn":10,"suggestions":"197"},{"ruleId":"161","severity":1,"message":"196","line":51,"column":8,"nodeType":"163","endLine":51,"endColumn":14,"suggestions":"198"},{"ruleId":"161","severity":1,"message":"199","line":64,"column":8,"nodeType":"163","endLine":64,"endColumn":23,"suggestions":"200"},{"ruleId":"161","severity":1,"message":"201","line":123,"column":8,"nodeType":"163","endLine":123,"endColumn":10,"suggestions":"202"},{"ruleId":"161","severity":1,"message":"196","line":29,"column":8,"nodeType":"163","endLine":29,"endColumn":10,"suggestions":"203"},{"ruleId":"161","severity":1,"message":"204","line":46,"column":8,"nodeType":"163","endLine":46,"endColumn":14,"suggestions":"205"},{"ruleId":"161","severity":1,"message":"206","line":33,"column":8,"nodeType":"163","endLine":33,"endColumn":10,"suggestions":"207"},{"ruleId":"161","severity":1,"message":"168","line":61,"column":8,"nodeType":"163","endLine":61,"endColumn":19,"suggestions":"208"},"no-native-reassign",["209"],"no-negated-in-lhs",["210"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentUser.id' and 'getToken'. Either include them or remove the dependency array.","ArrayExpression",["211"],["212"],"React Hook useEffect has a missing dependency: 'scorecards.length'. Either include it or remove the dependency array.",["213"],"React Hook useEffect has a missing dependency: 'getToken'. Either include it or remove the dependency array.",["214"],"React Hook useEffect has missing dependencies: 'currentUserId' and 'getToken'. Either include them or remove the dependency array.",["215"],["216"],"React Hook useEffect has missing dependencies: 'disc.id' and 'getToken'. Either include them or remove the dependency array.",["217"],"React Hook useEffect has a missing dependency: 'getDiscById'. Either include it or remove the dependency array.",["218"],["219"],"React Hook useEffect has missing dependencies: 'course.id', 'getToken', and 'userId'. Either include them or remove the dependency array.",["220"],"React Hook useEffect has missing dependencies: 'getToken' and 'scorecard.id'. Either include them or remove the dependency array.",["221"],"React Hook useEffect has missing dependencies: 'getToken' and 'scorecard.courseId'. Either include them or remove the dependency array.",["222"],"React Hook useEffect has a missing dependency: 'findScore'. Either include it or remove the dependency array.",["223"],"React Hook useEffect has missing dependencies: 'roundScores' and 'setRoundScores'. Either include them or remove the dependency array. If 'setRoundScores' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["224"],"React Hook useEffect has missing dependencies: 'names', 'params', and 'scoreBreakdown'. Either include them or remove the dependency array.",["225"],"React Hook useEffect has missing dependencies: 'getToken' and 'params.courseId'. Either include them or remove the dependency array.",["226"],["227"],"React Hook useEffect has missing dependencies: 'findScore' and 'scores.length'. Either include them or remove the dependency array.",["228"],["229"],"React Hook useEffect has missing dependencies: 'getToken' and 'params.holeId'. Either include them or remove the dependency array.",["230"],["231"],"React Hook useEffect has a missing dependency: 'getShotById'. Either include it or remove the dependency array.",["232"],"React Hook useEffect has missing dependencies: 'getToken' and 'userId'. Either include them or remove the dependency array.",["233"],["234"],"React Hook useEffect has missing dependencies: 'getToken', 'params.holeId', and 'params.scorecardId'. Either include them or remove the dependency array.",["235"],"React Hook useEffect has missing dependencies: 'getToken' and 'params.scorecardId'. Either include them or remove the dependency array.",["236"],["237"],"no-global-assign","no-unsafe-negation",{"desc":"238","fix":"239"},{"desc":"238","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},{"desc":"245","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},{"desc":"243","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"273","fix":"281"},{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},"Update the dependencies array to be: [currentUser.id, getToken]",{"range":"288","text":"289"},{"range":"290","text":"289"},"Update the dependencies array to be: [roundScores, scorecards.length]",{"range":"291","text":"292"},"Update the dependencies array to be: [getToken]",{"range":"293","text":"294"},"Update the dependencies array to be: [currentUserId, getToken]",{"range":"295","text":"296"},{"range":"297","text":"296"},"Update the dependencies array to be: [disc.id, getToken]",{"range":"298","text":"299"},"Update the dependencies array to be: [discId, getDiscById]",{"range":"300","text":"301"},{"range":"302","text":"294"},"Update the dependencies array to be: [course.id, getToken, userId]",{"range":"303","text":"304"},"Update the dependencies array to be: [getToken, scorecard.id]",{"range":"305","text":"306"},"Update the dependencies array to be: [getToken, scorecard.courseId]",{"range":"307","text":"308"},"Update the dependencies array to be: [findScore, holes, scorecardShots]",{"range":"309","text":"310"},"Update the dependencies array to be: [roundScores, score, setRoundScores]",{"range":"311","text":"312"},"Update the dependencies array to be: [chartContainer, names, params, scoreBreakdown]",{"range":"313","text":"314"},"Update the dependencies array to be: [getToken, params.courseId]",{"range":"315","text":"316"},"Update the dependencies array to be: [course, getToken, params.courseId]",{"range":"317","text":"318"},"Update the dependencies array to be: [shots, holes, scores.length, findScore]",{"range":"319","text":"320"},"Update the dependencies array to be: [scorecards.length, scores]",{"range":"321","text":"322"},"Update the dependencies array to be: [getToken, params.holeId]",{"range":"323","text":"324"},"Update the dependencies array to be: [getToken, hole, params.holeId]",{"range":"325","text":"326"},"Update the dependencies array to be: [getShotById, params.shotId]",{"range":"327","text":"328"},"Update the dependencies array to be: [getToken, userId]",{"range":"329","text":"330"},{"range":"331","text":"324"},"Update the dependencies array to be: [getToken, hole, params.holeId, params.scorecardId]",{"range":"332","text":"333"},"Update the dependencies array to be: [getToken, params.scorecardId]",{"range":"334","text":"335"},"Update the dependencies array to be: [getToken, scorecard]",{"range":"336","text":"337"},[1117,1119],"[currentUser.id, getToken]",[1581,1583],[3960,3973],"[roundScores, scorecards.length]",[1023,1025],"[getToken]",[1097,1099],"[currentUserId, getToken]",[1211,1213],[783,785],"[disc.id, getToken]",[2067,2075],"[discId, getDiscById]",[2488,2490],[856,858],"[course.id, getToken, userId]",[1044,1046],"[getToken, scorecard.id]",[1480,1482],"[getToken, scorecard.courseId]",[1610,1633],"[findScore, holes, scorecardShots]",[1769,1776],"[roundScores, score, setRoundScores]",[2163,2179],"[chartContainer, names, params, scoreBreakdown]",[2442,2444],"[getToken, params.courseId]",[4081,4089],"[course, getToken, params.courseId]",[5046,5060],"[shots, holes, scores.length, findScore]",[5525,5533],"[scorecards.length, scores]",[1297,1299],"[getToken, params.holeId]",[1820,1826],"[getToken, hole, params.holeId]",[2409,2424],"[getShotById, params.shotId]",[4612,4614],"[getToken, userId]",[1051,1053],[1596,1602],"[getToken, hole, params.holeId, params.scorecardId]",[1332,1334],"[getToken, params.scorecardId]",[2382,2393],"[getToken, scorecard]"]